// source: stationapi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.app.trainlcd.grpc.Company', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.CompanyType', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetStationByCoordinatesRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetStationByGroupIdRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetStationByIdRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetStationByLineIdRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetStationsByNameRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.Line', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.LineSymbol', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.LineType', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.MultipleLine', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.MultipleStationResponse', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.MultipleTrainTypeResponse', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.OperationStatus', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.SingleLine', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.SingleStationResponse', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.Station', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.StationNumber', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.StopCondition', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.TrainDirection', null, global);
goog.exportSymbol('proto.app.trainlcd.grpc.TrainType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetStationByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetStationByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetStationByIdRequest.displayName = 'proto.app.trainlcd.grpc.GetStationByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetStationByGroupIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetStationByGroupIdRequest.displayName = 'proto.app.trainlcd.grpc.GetStationByGroupIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetStationByCoordinatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.displayName = 'proto.app.trainlcd.grpc.GetStationByCoordinatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetStationByLineIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetStationByLineIdRequest.displayName = 'proto.app.trainlcd.grpc.GetStationByLineIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetStationsByNameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetStationsByNameRequest.displayName = 'proto.app.trainlcd.grpc.GetStationsByNameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.displayName = 'proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.displayName = 'proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.StationNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.StationNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.StationNumber.displayName = 'proto.app.trainlcd.grpc.StationNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.TrainType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.app.trainlcd.grpc.TrainType.repeatedFields_, null);
};
goog.inherits(proto.app.trainlcd.grpc.TrainType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.TrainType.displayName = 'proto.app.trainlcd.grpc.TrainType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.Station = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.app.trainlcd.grpc.Station.repeatedFields_, null);
};
goog.inherits(proto.app.trainlcd.grpc.Station, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.Station.displayName = 'proto.app.trainlcd.grpc.Station';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.SingleStationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.SingleStationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.SingleStationResponse.displayName = 'proto.app.trainlcd.grpc.SingleStationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.MultipleStationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.app.trainlcd.grpc.MultipleStationResponse.repeatedFields_, null);
};
goog.inherits(proto.app.trainlcd.grpc.MultipleStationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.MultipleStationResponse.displayName = 'proto.app.trainlcd.grpc.MultipleStationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.app.trainlcd.grpc.MultipleTrainTypeResponse.repeatedFields_, null);
};
goog.inherits(proto.app.trainlcd.grpc.MultipleTrainTypeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.MultipleTrainTypeResponse.displayName = 'proto.app.trainlcd.grpc.MultipleTrainTypeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.LineSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.LineSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.LineSymbol.displayName = 'proto.app.trainlcd.grpc.LineSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.Company = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.Company, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.Company.displayName = 'proto.app.trainlcd.grpc.Company';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.app.trainlcd.grpc.Line.repeatedFields_, null);
};
goog.inherits(proto.app.trainlcd.grpc.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.Line.displayName = 'proto.app.trainlcd.grpc.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.SingleLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.app.trainlcd.grpc.SingleLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.SingleLine.displayName = 'proto.app.trainlcd.grpc.SingleLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.app.trainlcd.grpc.MultipleLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.app.trainlcd.grpc.MultipleLine.repeatedFields_, null);
};
goog.inherits(proto.app.trainlcd.grpc.MultipleLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.app.trainlcd.grpc.MultipleLine.displayName = 'proto.app.trainlcd.grpc.MultipleLine';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetStationByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetStationByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetStationByIdRequest}
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetStationByIdRequest;
  return proto.app.trainlcd.grpc.GetStationByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetStationByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetStationByIdRequest}
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetStationByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetStationByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationByIdRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetStationByGroupIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetStationByGroupIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetStationByGroupIdRequest}
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetStationByGroupIdRequest;
  return proto.app.trainlcd.grpc.GetStationByGroupIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetStationByGroupIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetStationByGroupIdRequest}
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetStationByGroupIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetStationByGroupIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 group_id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationByGroupIdRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByGroupIdRequest.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetStationByCoordinatesRequest;
  return proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 limit = 3;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.app.trainlcd.grpc.GetStationByCoordinatesRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.GetStationByCoordinatesRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetStationByLineIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetStationByLineIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lineId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetStationByLineIdRequest}
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetStationByLineIdRequest;
  return proto.app.trainlcd.grpc.GetStationByLineIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetStationByLineIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetStationByLineIdRequest}
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLineId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetStationByLineIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetStationByLineIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLineId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 line_id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.prototype.getLineId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationByLineIdRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationByLineIdRequest.prototype.setLineId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetStationsByNameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetStationsByNameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetStationsByNameRequest}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetStationsByNameRequest;
  return proto.app.trainlcd.grpc.GetStationsByNameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetStationsByNameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetStationsByNameRequest}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStationName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetStationsByNameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetStationsByNameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string station_name = 1;
 * @return {string}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.getStationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.GetStationsByNameRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.setStationName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationsByNameRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.app.trainlcd.grpc.GetStationsByNameRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.GetStationsByNameRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lineGroupId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest}
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest;
  return proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest}
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLineGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLineGroupId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 line_group_id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.prototype.getLineGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest} returns this
 */
proto.app.trainlcd.grpc.GetStationsByLineGroupIdRequest.prototype.setLineGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest}
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest;
  return proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest}
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 station_id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.prototype.getStationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest} returns this
 */
proto.app.trainlcd.grpc.GetTrainTypesByStationIdRequest.prototype.setStationId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.StationNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.StationNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.StationNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.StationNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    lineSymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lineSymbolColor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lineSymbolShape: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stationNumber: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.StationNumber}
 */
proto.app.trainlcd.grpc.StationNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.StationNumber;
  return proto.app.trainlcd.grpc.StationNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.StationNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.StationNumber}
 */
proto.app.trainlcd.grpc.StationNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLineSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLineSymbolColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLineSymbolShape(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStationNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.StationNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.StationNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.StationNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.StationNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLineSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLineSymbolColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLineSymbolShape();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStationNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string line_symbol = 1;
 * @return {string}
 */
proto.app.trainlcd.grpc.StationNumber.prototype.getLineSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.StationNumber} returns this
 */
proto.app.trainlcd.grpc.StationNumber.prototype.setLineSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string line_symbol_color = 2;
 * @return {string}
 */
proto.app.trainlcd.grpc.StationNumber.prototype.getLineSymbolColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.StationNumber} returns this
 */
proto.app.trainlcd.grpc.StationNumber.prototype.setLineSymbolColor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string line_symbol_shape = 3;
 * @return {string}
 */
proto.app.trainlcd.grpc.StationNumber.prototype.getLineSymbolShape = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.StationNumber} returns this
 */
proto.app.trainlcd.grpc.StationNumber.prototype.setLineSymbolShape = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string station_number = 4;
 * @return {string}
 */
proto.app.trainlcd.grpc.StationNumber.prototype.getStationNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.StationNumber} returns this
 */
proto.app.trainlcd.grpc.StationNumber.prototype.setStationNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.app.trainlcd.grpc.TrainType.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.TrainType.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.TrainType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.TrainType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.TrainType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nameKatakana: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameRoman: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nameChinese: jspb.Message.getFieldWithDefault(msg, 7, ""),
    nameKorean: jspb.Message.getFieldWithDefault(msg, 8, ""),
    color: jspb.Message.getFieldWithDefault(msg, 9, ""),
    linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.app.trainlcd.grpc.Line.toObject, includeInstance),
    line: (f = msg.getLine()) && proto.app.trainlcd.grpc.Line.toObject(includeInstance, f),
    direction: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.TrainType}
 */
proto.app.trainlcd.grpc.TrainType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.TrainType;
  return proto.app.trainlcd.grpc.TrainType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.TrainType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.TrainType}
 */
proto.app.trainlcd.grpc.TrainType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKatakana(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameRoman(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameChinese(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKorean(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 10:
      var value = new proto.app.trainlcd.grpc.Line;
      reader.readMessage(value,proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    case 11:
      var value = new proto.app.trainlcd.grpc.Line;
      reader.readMessage(value,proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    case 12:
      var value = /** @type {!proto.app.trainlcd.grpc.TrainDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.TrainType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.TrainType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.TrainType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.TrainType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTypeId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNameKatakana();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameRoman();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNameChinese();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNameKorean();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.app.trainlcd.grpc.Line.serializeBinaryToWriter
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.app.trainlcd.grpc.Line.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 type_id = 2;
 * @return {number}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 group_id = 3;
 * @return {number}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name_katakana = 5;
 * @return {string}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getNameKatakana = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setNameKatakana = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_roman = 6;
 * @return {string}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getNameRoman = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setNameRoman = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name_chinese = 7;
 * @return {string}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getNameChinese = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setNameChinese = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string name_korean = 8;
 * @return {string}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getNameKorean = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setNameKorean = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string color = 9;
 * @return {string}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Line lines = 10;
 * @return {!Array<!proto.app.trainlcd.grpc.Line>}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.Line, 10));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.Line>} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
*/
proto.app.trainlcd.grpc.TrainType.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.TrainType.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.app.trainlcd.grpc.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};


/**
 * optional Line line = 11;
 * @return {?proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getLine = function() {
  return /** @type{?proto.app.trainlcd.grpc.Line} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.Line, 11));
};


/**
 * @param {?proto.app.trainlcd.grpc.Line|undefined} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
*/
proto.app.trainlcd.grpc.TrainType.prototype.setLine = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.clearLine = function() {
  return this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.TrainType.prototype.hasLine = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TrainDirection direction = 12;
 * @return {!proto.app.trainlcd.grpc.TrainDirection}
 */
proto.app.trainlcd.grpc.TrainType.prototype.getDirection = function() {
  return /** @type {!proto.app.trainlcd.grpc.TrainDirection} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.TrainDirection} value
 * @return {!proto.app.trainlcd.grpc.TrainType} returns this
 */
proto.app.trainlcd.grpc.TrainType.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.app.trainlcd.grpc.Station.repeatedFields_ = [9,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.Station.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.Station.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.Station} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.Station.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nameKatakana: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nameRoman: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameChinese: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nameKorean: jspb.Message.getFieldWithDefault(msg, 7, ""),
    threeLetterCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.app.trainlcd.grpc.Line.toObject, includeInstance),
    line: (f = msg.getLine()) && proto.app.trainlcd.grpc.Line.toObject(includeInstance, f),
    prefectureId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    postalCode: jspb.Message.getFieldWithDefault(msg, 12, ""),
    address: jspb.Message.getFieldWithDefault(msg, 13, ""),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    openedAt: jspb.Message.getFieldWithDefault(msg, 16, ""),
    closedAt: jspb.Message.getFieldWithDefault(msg, 17, ""),
    status: jspb.Message.getFieldWithDefault(msg, 18, 0),
    stationNumbersList: jspb.Message.toObjectList(msg.getStationNumbersList(),
    proto.app.trainlcd.grpc.StationNumber.toObject, includeInstance),
    stopCondition: jspb.Message.getFieldWithDefault(msg, 20, 0),
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    hasTrainTypes: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    pass: jspb.Message.getBooleanFieldWithDefault(msg, 23, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.Station}
 */
proto.app.trainlcd.grpc.Station.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.Station;
  return proto.app.trainlcd.grpc.Station.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.Station} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.Station}
 */
proto.app.trainlcd.grpc.Station.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKatakana(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameRoman(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameChinese(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKorean(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreeLetterCode(value);
      break;
    case 9:
      var value = new proto.app.trainlcd.grpc.Line;
      reader.readMessage(value,proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    case 10:
      var value = new proto.app.trainlcd.grpc.Line;
      reader.readMessage(value,proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefectureId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalCode(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenedAt(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setClosedAt(value);
      break;
    case 18:
      var value = /** @type {!proto.app.trainlcd.grpc.OperationStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 19:
      var value = new proto.app.trainlcd.grpc.StationNumber;
      reader.readMessage(value,proto.app.trainlcd.grpc.StationNumber.deserializeBinaryFromReader);
      msg.addStationNumbers(value);
      break;
    case 20:
      var value = /** @type {!proto.app.trainlcd.grpc.StopCondition} */ (reader.readEnum());
      msg.setStopCondition(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasTrainTypes(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.Station.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.Station.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.Station} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.Station.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNameKatakana();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNameRoman();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameChinese();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNameKorean();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.app.trainlcd.grpc.Line.serializeBinaryToWriter
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.app.trainlcd.grpc.Line.serializeBinaryToWriter
    );
  }
  f = message.getPrefectureId();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getPostalCode();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getOpenedAt();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getClosedAt();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = message.getStationNumbersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.app.trainlcd.grpc.StationNumber.serializeBinaryToWriter
    );
  }
  f = message.getStopCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getPass();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.Station.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 group_id = 2;
 * @return {number}
 */
proto.app.trainlcd.grpc.Station.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name_katakana = 4;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getNameKatakana = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setNameKatakana = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name_roman = 5;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getNameRoman = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setNameRoman = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_chinese = 6;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getNameChinese = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setNameChinese = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name_korean = 7;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getNameKorean = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setNameKorean = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string three_letter_code = 8;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getThreeLetterCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setThreeLetterCode = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.clearThreeLetterCode = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Station.prototype.hasThreeLetterCode = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Line lines = 9;
 * @return {!Array<!proto.app.trainlcd.grpc.Line>}
 */
proto.app.trainlcd.grpc.Station.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.Line, 9));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.Line>} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
*/
proto.app.trainlcd.grpc.Station.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.Station.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.app.trainlcd.grpc.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};


/**
 * optional Line line = 10;
 * @return {?proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.Station.prototype.getLine = function() {
  return /** @type{?proto.app.trainlcd.grpc.Line} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.Line, 10));
};


/**
 * @param {?proto.app.trainlcd.grpc.Line|undefined} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
*/
proto.app.trainlcd.grpc.Station.prototype.setLine = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.clearLine = function() {
  return this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Station.prototype.hasLine = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 prefecture_id = 11;
 * @return {number}
 */
proto.app.trainlcd.grpc.Station.prototype.getPrefectureId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setPrefectureId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string postal_code = 12;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getPostalCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setPostalCode = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string address = 13;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional double latitude = 14;
 * @return {number}
 */
proto.app.trainlcd.grpc.Station.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double longitude = 15;
 * @return {number}
 */
proto.app.trainlcd.grpc.Station.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional string opened_at = 16;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getOpenedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setOpenedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string closed_at = 17;
 * @return {string}
 */
proto.app.trainlcd.grpc.Station.prototype.getClosedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setClosedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional OperationStatus status = 18;
 * @return {!proto.app.trainlcd.grpc.OperationStatus}
 */
proto.app.trainlcd.grpc.Station.prototype.getStatus = function() {
  return /** @type {!proto.app.trainlcd.grpc.OperationStatus} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.OperationStatus} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 18, value);
};


/**
 * repeated StationNumber station_numbers = 19;
 * @return {!Array<!proto.app.trainlcd.grpc.StationNumber>}
 */
proto.app.trainlcd.grpc.Station.prototype.getStationNumbersList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.StationNumber>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.StationNumber, 19));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.StationNumber>} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
*/
proto.app.trainlcd.grpc.Station.prototype.setStationNumbersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.StationNumber=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.StationNumber}
 */
proto.app.trainlcd.grpc.Station.prototype.addStationNumbers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.app.trainlcd.grpc.StationNumber, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.clearStationNumbersList = function() {
  return this.setStationNumbersList([]);
};


/**
 * optional StopCondition stop_condition = 20;
 * @return {!proto.app.trainlcd.grpc.StopCondition}
 */
proto.app.trainlcd.grpc.Station.prototype.getStopCondition = function() {
  return /** @type {!proto.app.trainlcd.grpc.StopCondition} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.StopCondition} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setStopCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * optional double distance = 21;
 * @return {number}
 */
proto.app.trainlcd.grpc.Station.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Station.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool has_train_types = 22;
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Station.prototype.getHasTrainTypes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setHasTrainTypes = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.clearHasTrainTypes = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Station.prototype.hasHasTrainTypes = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool pass = 23;
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Station.prototype.getPass = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.app.trainlcd.grpc.Station} returns this
 */
proto.app.trainlcd.grpc.Station.prototype.setPass = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.SingleStationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.SingleStationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.SingleStationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.SingleStationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    station: (f = msg.getStation()) && proto.app.trainlcd.grpc.Station.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.SingleStationResponse}
 */
proto.app.trainlcd.grpc.SingleStationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.SingleStationResponse;
  return proto.app.trainlcd.grpc.SingleStationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.SingleStationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.SingleStationResponse}
 */
proto.app.trainlcd.grpc.SingleStationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.app.trainlcd.grpc.Station;
      reader.readMessage(value,proto.app.trainlcd.grpc.Station.deserializeBinaryFromReader);
      msg.setStation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.SingleStationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.SingleStationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.SingleStationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.SingleStationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.app.trainlcd.grpc.Station.serializeBinaryToWriter
    );
  }
};


/**
 * optional Station station = 1;
 * @return {?proto.app.trainlcd.grpc.Station}
 */
proto.app.trainlcd.grpc.SingleStationResponse.prototype.getStation = function() {
  return /** @type{?proto.app.trainlcd.grpc.Station} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.Station, 1));
};


/**
 * @param {?proto.app.trainlcd.grpc.Station|undefined} value
 * @return {!proto.app.trainlcd.grpc.SingleStationResponse} returns this
*/
proto.app.trainlcd.grpc.SingleStationResponse.prototype.setStation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.SingleStationResponse} returns this
 */
proto.app.trainlcd.grpc.SingleStationResponse.prototype.clearStation = function() {
  return this.setStation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.SingleStationResponse.prototype.hasStation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.app.trainlcd.grpc.MultipleStationResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.MultipleStationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.MultipleStationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.MultipleStationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.MultipleStationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationsList: jspb.Message.toObjectList(msg.getStationsList(),
    proto.app.trainlcd.grpc.Station.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.MultipleStationResponse}
 */
proto.app.trainlcd.grpc.MultipleStationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.MultipleStationResponse;
  return proto.app.trainlcd.grpc.MultipleStationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.MultipleStationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.MultipleStationResponse}
 */
proto.app.trainlcd.grpc.MultipleStationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.app.trainlcd.grpc.Station;
      reader.readMessage(value,proto.app.trainlcd.grpc.Station.deserializeBinaryFromReader);
      msg.addStations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.MultipleStationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.MultipleStationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.MultipleStationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.MultipleStationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.app.trainlcd.grpc.Station.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Station stations = 1;
 * @return {!Array<!proto.app.trainlcd.grpc.Station>}
 */
proto.app.trainlcd.grpc.MultipleStationResponse.prototype.getStationsList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.Station>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.Station, 1));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.Station>} value
 * @return {!proto.app.trainlcd.grpc.MultipleStationResponse} returns this
*/
proto.app.trainlcd.grpc.MultipleStationResponse.prototype.setStationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.Station=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.Station}
 */
proto.app.trainlcd.grpc.MultipleStationResponse.prototype.addStations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.app.trainlcd.grpc.Station, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.MultipleStationResponse} returns this
 */
proto.app.trainlcd.grpc.MultipleStationResponse.prototype.clearStationsList = function() {
  return this.setStationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.MultipleTrainTypeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    trainTypesList: jspb.Message.toObjectList(msg.getTrainTypesList(),
    proto.app.trainlcd.grpc.TrainType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse}
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.MultipleTrainTypeResponse;
  return proto.app.trainlcd.grpc.MultipleTrainTypeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse}
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.app.trainlcd.grpc.TrainType;
      reader.readMessage(value,proto.app.trainlcd.grpc.TrainType.deserializeBinaryFromReader);
      msg.addTrainTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.MultipleTrainTypeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrainTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.app.trainlcd.grpc.TrainType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TrainType train_types = 1;
 * @return {!Array<!proto.app.trainlcd.grpc.TrainType>}
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.prototype.getTrainTypesList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.TrainType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.TrainType, 1));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.TrainType>} value
 * @return {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse} returns this
*/
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.prototype.setTrainTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.TrainType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.TrainType}
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.prototype.addTrainTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.app.trainlcd.grpc.TrainType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.MultipleTrainTypeResponse} returns this
 */
proto.app.trainlcd.grpc.MultipleTrainTypeResponse.prototype.clearTrainTypesList = function() {
  return this.setTrainTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.LineSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.LineSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.LineSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    color: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shape: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.LineSymbol}
 */
proto.app.trainlcd.grpc.LineSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.LineSymbol;
  return proto.app.trainlcd.grpc.LineSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.LineSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.LineSymbol}
 */
proto.app.trainlcd.grpc.LineSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.LineSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.LineSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.LineSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShape();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.LineSymbol} returns this
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string color = 2;
 * @return {string}
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.LineSymbol} returns this
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string shape = 3;
 * @return {string}
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.getShape = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.LineSymbol} returns this
 */
proto.app.trainlcd.grpc.LineSymbol.prototype.setShape = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.Company.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.Company.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.Company} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.Company.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    railroadId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nameShort: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nameKatakana: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nameFull: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameEnglishShort: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nameEnglishFull: jspb.Message.getFieldWithDefault(msg, 7, ""),
    url: jspb.Message.getFieldWithDefault(msg, 8, ""),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.Company}
 */
proto.app.trainlcd.grpc.Company.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.Company;
  return proto.app.trainlcd.grpc.Company.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.Company} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.Company}
 */
proto.app.trainlcd.grpc.Company.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRailroadId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameShort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKatakana(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameFull(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameEnglishShort(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameEnglishFull(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 9:
      var value = /** @type {!proto.app.trainlcd.grpc.CompanyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {!proto.app.trainlcd.grpc.OperationStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.Company.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.Company.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.Company} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.Company.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRailroadId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNameShort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNameKatakana();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNameFull();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameEnglishShort();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNameEnglishFull();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.Company.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 railroad_id = 2;
 * @return {number}
 */
proto.app.trainlcd.grpc.Company.prototype.getRailroadId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setRailroadId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name_short = 3;
 * @return {string}
 */
proto.app.trainlcd.grpc.Company.prototype.getNameShort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setNameShort = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name_katakana = 4;
 * @return {string}
 */
proto.app.trainlcd.grpc.Company.prototype.getNameKatakana = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setNameKatakana = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name_full = 5;
 * @return {string}
 */
proto.app.trainlcd.grpc.Company.prototype.getNameFull = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setNameFull = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_english_short = 6;
 * @return {string}
 */
proto.app.trainlcd.grpc.Company.prototype.getNameEnglishShort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setNameEnglishShort = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name_english_full = 7;
 * @return {string}
 */
proto.app.trainlcd.grpc.Company.prototype.getNameEnglishFull = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setNameEnglishFull = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string url = 8;
 * @return {string}
 */
proto.app.trainlcd.grpc.Company.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional CompanyType type = 9;
 * @return {!proto.app.trainlcd.grpc.CompanyType}
 */
proto.app.trainlcd.grpc.Company.prototype.getType = function() {
  return /** @type {!proto.app.trainlcd.grpc.CompanyType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.CompanyType} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OperationStatus status = 10;
 * @return {!proto.app.trainlcd.grpc.OperationStatus}
 */
proto.app.trainlcd.grpc.Company.prototype.getStatus = function() {
  return /** @type {!proto.app.trainlcd.grpc.OperationStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.OperationStatus} value
 * @return {!proto.app.trainlcd.grpc.Company} returns this
 */
proto.app.trainlcd.grpc.Company.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.app.trainlcd.grpc.Line.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nameShort: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nameKatakana: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nameFull: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nameRoman: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameChinese: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nameKorean: jspb.Message.getFieldWithDefault(msg, 7, ""),
    color: jspb.Message.getFieldWithDefault(msg, 8, ""),
    lineType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    lineSymbolsList: jspb.Message.toObjectList(msg.getLineSymbolsList(),
    proto.app.trainlcd.grpc.LineSymbol.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 11, 0),
    station: (f = msg.getStation()) && proto.app.trainlcd.grpc.Station.toObject(includeInstance, f),
    company: (f = msg.getCompany()) && proto.app.trainlcd.grpc.Company.toObject(includeInstance, f),
    trainType: (f = msg.getTrainType()) && proto.app.trainlcd.grpc.TrainType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.Line;
  return proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameShort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKatakana(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameFull(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameRoman(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameChinese(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKorean(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 9:
      var value = /** @type {!proto.app.trainlcd.grpc.LineType} */ (reader.readEnum());
      msg.setLineType(value);
      break;
    case 10:
      var value = new proto.app.trainlcd.grpc.LineSymbol;
      reader.readMessage(value,proto.app.trainlcd.grpc.LineSymbol.deserializeBinaryFromReader);
      msg.addLineSymbols(value);
      break;
    case 11:
      var value = /** @type {!proto.app.trainlcd.grpc.OperationStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 12:
      var value = new proto.app.trainlcd.grpc.Station;
      reader.readMessage(value,proto.app.trainlcd.grpc.Station.deserializeBinaryFromReader);
      msg.setStation(value);
      break;
    case 13:
      var value = new proto.app.trainlcd.grpc.Company;
      reader.readMessage(value,proto.app.trainlcd.grpc.Company.deserializeBinaryFromReader);
      msg.setCompany(value);
      break;
    case 14:
      var value = new proto.app.trainlcd.grpc.TrainType;
      reader.readMessage(value,proto.app.trainlcd.grpc.TrainType.deserializeBinaryFromReader);
      msg.setTrainType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNameShort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNameKatakana();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNameFull();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNameRoman();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameChinese();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNameKorean();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLineType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getLineSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.app.trainlcd.grpc.LineSymbol.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getStation();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.app.trainlcd.grpc.Station.serializeBinaryToWriter
    );
  }
  f = message.getCompany();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.app.trainlcd.grpc.Company.serializeBinaryToWriter
    );
  }
  f = message.getTrainType();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.app.trainlcd.grpc.TrainType.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.app.trainlcd.grpc.Line.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name_short = 2;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getNameShort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setNameShort = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name_katakana = 3;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getNameKatakana = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setNameKatakana = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name_full = 4;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getNameFull = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setNameFull = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name_roman = 5;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getNameRoman = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setNameRoman = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_chinese = 6;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getNameChinese = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setNameChinese = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name_korean = 7;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getNameKorean = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setNameKorean = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string color = 8;
 * @return {string}
 */
proto.app.trainlcd.grpc.Line.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional LineType line_type = 9;
 * @return {!proto.app.trainlcd.grpc.LineType}
 */
proto.app.trainlcd.grpc.Line.prototype.getLineType = function() {
  return /** @type {!proto.app.trainlcd.grpc.LineType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.LineType} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setLineType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * repeated LineSymbol line_symbols = 10;
 * @return {!Array<!proto.app.trainlcd.grpc.LineSymbol>}
 */
proto.app.trainlcd.grpc.Line.prototype.getLineSymbolsList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.LineSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.LineSymbol, 10));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.LineSymbol>} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
*/
proto.app.trainlcd.grpc.Line.prototype.setLineSymbolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.LineSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.LineSymbol}
 */
proto.app.trainlcd.grpc.Line.prototype.addLineSymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.app.trainlcd.grpc.LineSymbol, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.clearLineSymbolsList = function() {
  return this.setLineSymbolsList([]);
};


/**
 * optional OperationStatus status = 11;
 * @return {!proto.app.trainlcd.grpc.OperationStatus}
 */
proto.app.trainlcd.grpc.Line.prototype.getStatus = function() {
  return /** @type {!proto.app.trainlcd.grpc.OperationStatus} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.app.trainlcd.grpc.OperationStatus} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional Station station = 12;
 * @return {?proto.app.trainlcd.grpc.Station}
 */
proto.app.trainlcd.grpc.Line.prototype.getStation = function() {
  return /** @type{?proto.app.trainlcd.grpc.Station} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.Station, 12));
};


/**
 * @param {?proto.app.trainlcd.grpc.Station|undefined} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
*/
proto.app.trainlcd.grpc.Line.prototype.setStation = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.clearStation = function() {
  return this.setStation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Line.prototype.hasStation = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Company company = 13;
 * @return {?proto.app.trainlcd.grpc.Company}
 */
proto.app.trainlcd.grpc.Line.prototype.getCompany = function() {
  return /** @type{?proto.app.trainlcd.grpc.Company} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.Company, 13));
};


/**
 * @param {?proto.app.trainlcd.grpc.Company|undefined} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
*/
proto.app.trainlcd.grpc.Line.prototype.setCompany = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.clearCompany = function() {
  return this.setCompany(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Line.prototype.hasCompany = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional TrainType train_type = 14;
 * @return {?proto.app.trainlcd.grpc.TrainType}
 */
proto.app.trainlcd.grpc.Line.prototype.getTrainType = function() {
  return /** @type{?proto.app.trainlcd.grpc.TrainType} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.TrainType, 14));
};


/**
 * @param {?proto.app.trainlcd.grpc.TrainType|undefined} value
 * @return {!proto.app.trainlcd.grpc.Line} returns this
*/
proto.app.trainlcd.grpc.Line.prototype.setTrainType = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.Line} returns this
 */
proto.app.trainlcd.grpc.Line.prototype.clearTrainType = function() {
  return this.setTrainType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.Line.prototype.hasTrainType = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.SingleLine.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.SingleLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.SingleLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.SingleLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    line: (f = msg.getLine()) && proto.app.trainlcd.grpc.Line.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.SingleLine}
 */
proto.app.trainlcd.grpc.SingleLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.SingleLine;
  return proto.app.trainlcd.grpc.SingleLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.SingleLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.SingleLine}
 */
proto.app.trainlcd.grpc.SingleLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.app.trainlcd.grpc.Line;
      reader.readMessage(value,proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.SingleLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.SingleLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.SingleLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.SingleLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.app.trainlcd.grpc.Line.serializeBinaryToWriter
    );
  }
};


/**
 * optional Line line = 1;
 * @return {?proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.SingleLine.prototype.getLine = function() {
  return /** @type{?proto.app.trainlcd.grpc.Line} */ (
    jspb.Message.getWrapperField(this, proto.app.trainlcd.grpc.Line, 1));
};


/**
 * @param {?proto.app.trainlcd.grpc.Line|undefined} value
 * @return {!proto.app.trainlcd.grpc.SingleLine} returns this
*/
proto.app.trainlcd.grpc.SingleLine.prototype.setLine = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.app.trainlcd.grpc.SingleLine} returns this
 */
proto.app.trainlcd.grpc.SingleLine.prototype.clearLine = function() {
  return this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.app.trainlcd.grpc.SingleLine.prototype.hasLine = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.app.trainlcd.grpc.MultipleLine.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.app.trainlcd.grpc.MultipleLine.prototype.toObject = function(opt_includeInstance) {
  return proto.app.trainlcd.grpc.MultipleLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.app.trainlcd.grpc.MultipleLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.MultipleLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.app.trainlcd.grpc.Line.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.app.trainlcd.grpc.MultipleLine}
 */
proto.app.trainlcd.grpc.MultipleLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.app.trainlcd.grpc.MultipleLine;
  return proto.app.trainlcd.grpc.MultipleLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.app.trainlcd.grpc.MultipleLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.app.trainlcd.grpc.MultipleLine}
 */
proto.app.trainlcd.grpc.MultipleLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.app.trainlcd.grpc.Line;
      reader.readMessage(value,proto.app.trainlcd.grpc.Line.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.app.trainlcd.grpc.MultipleLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.app.trainlcd.grpc.MultipleLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.app.trainlcd.grpc.MultipleLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.app.trainlcd.grpc.MultipleLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.app.trainlcd.grpc.Line.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Line lines = 1;
 * @return {!Array<!proto.app.trainlcd.grpc.Line>}
 */
proto.app.trainlcd.grpc.MultipleLine.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.app.trainlcd.grpc.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.app.trainlcd.grpc.Line, 1));
};


/**
 * @param {!Array<!proto.app.trainlcd.grpc.Line>} value
 * @return {!proto.app.trainlcd.grpc.MultipleLine} returns this
*/
proto.app.trainlcd.grpc.MultipleLine.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.app.trainlcd.grpc.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.app.trainlcd.grpc.Line}
 */
proto.app.trainlcd.grpc.MultipleLine.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.app.trainlcd.grpc.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.app.trainlcd.grpc.MultipleLine} returns this
 */
proto.app.trainlcd.grpc.MultipleLine.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};


/**
 * @enum {number}
 */
proto.app.trainlcd.grpc.OperationStatus = {
  INOPERATION: 0,
  NOTOPENED: 1,
  CLOSED: 2
};

/**
 * @enum {number}
 */
proto.app.trainlcd.grpc.StopCondition = {
  ALL: 0,
  NOT: 1,
  PARTIAL: 2,
  WEEKDAY: 3,
  HOLIDAY: 4,
  PARTIALSTOP: 5
};

/**
 * @enum {number}
 */
proto.app.trainlcd.grpc.TrainDirection = {
  BOTH: 0,
  INBOUND: 1,
  OUTBOUND: 2
};

/**
 * @enum {number}
 */
proto.app.trainlcd.grpc.LineType = {
  OTHERLINETYPE: 0,
  BULLETTRAIN: 1,
  NORMAL: 2,
  SUBWAY: 3,
  TRAM: 4,
  MONORAILORAGT: 5
};

/**
 * @enum {number}
 */
proto.app.trainlcd.grpc.CompanyType = {
  OTHERCOMPANY: 0,
  JR: 1,
  PRIVATE: 2,
  MAJOR: 3,
  SEMIMAJOR: 4
};

goog.object.extend(exports, proto.app.trainlcd.grpc);
